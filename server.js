// Generated by CoffeeScript 1.8.0
(function() {
  var app, array, cheerio, each, express, fs, google, https, https_app, is_dev, request, sites;

  cheerio = require('cheerio');

  express = require('express');

  request = require('request');

  app = express();

  google = require('google');

  each = require('async-each');

  array = require('array-extended');

  fs = require('fs');

  https = require('https');

  app.set('port', process.env.PORT || 2053);

  app.set('kill_time', 3000);

  is_dev = process.env.PWD === '/Users/roma/work/aimpr-server';

  console.info('is dev?', is_dev);

  https_app = https.createServer({
    key: fs.readFileSync(is_dev ? 'key.pem' : 'ssl.key'),
    cert: fs.readFileSync(is_dev ? 'cert.pem' : 'ssl.crt'),
    passphrase: is_dev ? 'aimpr' : 'aimpraimpr'
  }, app);

  sites = {
    'pesenok': '.status_select',
    'megalyrics': '.text_inner',
    'songspro': '.status_select',
    'webkind': '#text',
    're-minor': '.accords2 pre',
    'oldielyrics': '#song .lyrics',
    'metrolyrics': '#lyrics-body-text',
    'musixmatch': '#lyrics-html',
    'azlyrics': '#main>div:nth-of-type(3)',
    'genius': '.lyrics>p'
  };

  app.get('/search/:q', function(req, res) {
    var is_response_generated, prms, result, start_time;
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    prms = req.params;
    start_time = +(new Date);
    google.resultsPerPage = 10;
    is_response_generated = false;
    result = {
      error: 'internal server error'
    };
    setTimeout(function() {
      if (!is_response_generated) {
        res.json(result);
        return process.exit(0);
      }
    }, app.get('kill_time') + 1000);
    return google(prms.q, function(err, next, links) {
      var match_count, processed_urls, urls;
      if (err) {
        is_response_generated = true;
        return res.json({
          error: 'google require captcha, try again later :('
        });
      }
      if (!links) {
        is_response_generated = true;
        return res.json({
          error: "sorry, there is no lyrics for: '" + prms.q + "'"
        });
      }
      result = {
        response: {
          items: {},
          vk: false
        }
      };
      match_count = 0;
      urls = array(links.map(function(l) {
        return l.link;
      })).unique().value();
      urls = urls.map(function(url) {
        var site, url_obj, _;
        url_obj = {
          url: url,
          site: null
        };
        for (site in sites) {
          _ = sites[site];
          if (new RegExp(site).test(url)) {
            url_obj.site = site;
          }
        }
        return url_obj;
      });
      urls = urls.filter(function(url) {
        return url.site != null;
      });
      result.response.count = urls.length;
      if (!urls.length) {
        is_response_generated = true;
        return res.json({
          error: "sorry, there is no lyrics for: '" + prms.q + "'"
        });
      }
      processed_urls = 0;
      console.info("------------------------- " + (prms.q.substr(0, 23)));
      return each(urls, function(obj) {
        return request(obj.url, function(error, response, body) {
          var $;
          if (is_response_generated) {
            return;
          }
          $ = cheerio.load(body);
          result.response.items[obj.site] = $(sites[obj.site]).text().trim();
          processed_urls += 1;
          result.response.time = +(new Date) - start_time;
          console.info(obj.site, result.response.time);
          if (processed_urls === urls.length || result.response.time >= app.get('kill_time')) {
            is_response_generated = true;
            console.info('response generated in ', result.response.time);
            return res.json(result);
          }
        });
      });
    });
  });

  app.get('*', function(req, res) {
    return res.json({
      error: 'not enough params'
    });
  });

  https_app.listen(app.get('port'), function() {
    return console.log("Node app is running at localhost: " + (app.get('port')));
  });

}).call(this);
