// Generated by CoffeeScript 1.8.0
(function() {
  var app, array, cheerio, each, express, google, request, sites;

  cheerio = require('cheerio');

  express = require('express');

  request = require('request');

  app = express();

  google = require('google');

  each = require('async-each');

  array = require('array-extended');

  app.set('port', process.env.PORT || 5000);

  app.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    return next();
  });

  sites = {
    musixmatch: 'https://www.musixmatch.com/lyrics/'
  };

  app.get('/:sitename/:artist/:title', function(req, res) {
    var prms, url;
    prms = req.params;
    if (prms.sitename === 'musixmatch') {
      url = sites[prms.sitename] + [prms.artist, prms.title].join('/');
    }
    return request(url, function(error, response, body) {
      var $, text;
      $ = cheerio.load(body);
      text = $('#lyrics-html').text();
      return res.json({
        response: text
      });
    });
  });

  sites = {
    'oldielyrics': '#song .lyrics',
    'metrolyrics': '#lyrics-body-text'
  };

  app.get('/search/:q', function(req, res) {
    var prms;
    prms = req.params;
    google.resultsPerPage = 10;
    return google(prms.q, function(err, next, links) {
      var match_count, resp, urls;
      resp = {};
      match_count = 0;
      urls = array(links.map(function(l) {
        return l.link;
      })).unique().value();
      return each(urls, function(url) {
        var query, site_name, _results;
        _results = [];
        for (site_name in sites) {
          query = sites[site_name];
          if (new RegExp(site_name).test(url)) {
            match_count += 1;
            console.log("finded " + url);
            _results.push(request(url, function(error, response, body) {
              var $;
              match_count -= 1;
              $ = cheerio.load(body);
              resp[site_name] = $(sites[site_name]).text();
              console.log("get content for " + url, resp[site_name]);
              if (match_count === 0) {
                return res.json({
                  response: resp
                });
              }
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }, function(error, contents) {
        return console.log(error, contents);
      });
    });
  });

  app.get('*', function(req, res) {
    return res.json({
      error: 'not enough params'
    });
  });

  app.listen(app.get('port'), function() {
    return console.log("Node app is running at localhost: " + (app.get('port')));
  });

}).call(this);
